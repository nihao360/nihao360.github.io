<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>欢迎光临</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-05T03:40:06.084Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CHQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin学习笔记</title>
    <link href="http://example.com/2023/10/05/Kotlin%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/10/05/Kotlin%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-05T03:18:59.790Z</published>
    <updated>2023-10-05T03:40:06.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin学习记录"><a href="#Kotlin学习记录" class="headerlink" title="Kotlin学习记录"></a>Kotlin学习记录</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>常见操作：</p><p>列表是一种可变长度、可更改的数据结构，用于存储一组有序的元素。</p><ul><li>使用 listOf() 函数创建一个不可变的列表。</li><li>使用索引访问列表中的元素。</li><li>使用 for 循环遍历列表并打印每个元素。</li><li>使用 arrayListOf() 函数创建可变列表。</li><li>使用 add() 方法添加元素到可变列表的末尾。</li><li>使用索引修改可变列表中的元素。</li><li>使用 remove() 方法删除可变列表中的元素。</li></ul><p>需要注意的是，不可变列表(List)是只读的，无法对其进行修改。要修改列表的内容，需要使用可变列表(MutableList)的实现类，例如 ArrayList。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funmain()&#123;</span><br><span class="line">    <span class="keyword">val</span> days=mutableListOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">val</span> removeList=mutableListOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">    days.removeAt(<span class="number">3</span>)<span class="comment">//删除第四个</span></span><br><span class="line">    days.removeAll(removeList)<span class="comment">//删除与这个列表的共同元素，即去掉补集</span></span><br><span class="line">    print(days)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：当需要对数据进行频繁的添加、删除和修改操作时，可变列表（MutableList）可能更适合；而当需要一个固定大小且操作较简单的数据结构时，数组可能是更好的选择。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类是一个嵌套在其他类中的类，并且可以访问外部类的成员。</p><p>内部类相当于java<strong>没有使用static修饰</strong>的内部类。使用<strong>inner</strong>关键字修饰。</p><h4 id="（1）特点"><a href="#（1）特点" class="headerlink" title="（1）特点"></a>（1）特点</h4><ul><li>内部类成员可以直接访问外部类的<strong>私有数据</strong>，因为内部类相当于外部类的成员之一；</li><li>外部类不能访问内部类的成员，如需访问，需要通过创建内部类对象，通过对象访问内部类成员。</li></ul><h4 id="（2）定义内部类"><a href="#（2）定义内部类" class="headerlink" title="（2）定义内部类"></a>（2）定义内部类</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    OuterClass().getInnerFunction()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">//外部类的属性可被内部类使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> outerParam = <span class="string">&quot;外部类的私有属性&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部类的私有方法可以被内部类调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">outerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;外部类的私有方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过该类创建内部类对象，调用内部类方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getInnerFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//        innerTest()//这种外部类直接调用内部类成员的方式是编译不通过的，因为此时根本不存在内部类的对象</span></span><br><span class="line">        InnerClass().innerTest() <span class="comment">//外部类想调用内部类，需定义一个内部类的对象，通过对象调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="comment">//内部类成员，在外部类通过内部类的对象获取，但是内部类可以直接调用外部类成员</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">innerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;内部类的方法方法，外部类属性：<span class="variable">$outerParam</span>&quot;</span>)<span class="comment">//获取外部类属性</span></span><br><span class="line">            outerTest()<span class="comment">//调用外部类方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（3）外部类-内部类交互原理"><a href="#（3）外部类-内部类交互原理" class="headerlink" title="（3）外部类-内部类交互原理"></a>（3）外部类-内部类交互原理</h4><p>  ①为什么内部类可以调用外部类私有成员？</p><p> 在内部类对象中，<strong>保存了</strong>一个该内部类所寄生的<strong>外部类的对象的引用</strong>。</p><p> 内部类在方法中访问属性顺序：方法是否有该变量（如果没有，下同）&#x3D;&gt;内部类是否有该属性&#x3D;&gt;外部类是否有该属性，如果都没有，则编译报错。</p><p> ②为什么外部类不能直接调用内部类成员？</p><p> 创建外部类对象时，内部类根本还不存在（如果没有在外部类创建该内部类对象，上面的程序中getInnerFunction()方法也是先创建了InnerClass对象才能调用InnerClass成员），因此也不存在直接使用该对象内部类的成员了。</p><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p> 嵌套类相当于java的静态内部类（static class），但是kotlin完全取消了<strong>static</strong>关键字，所以kotlin类中除去嵌套类，其余成员均为非静态成员。</p><p> 内部类和嵌套类的使用考虑：优先考虑嵌套类。</p><p>嵌套类是定义在另一个类内部的类，它们之间的关系比较独立。与之相对，内部类是一个依附于外部类的类，它可以访问外部类的成员。</p><p>还可以将接口与嵌套一起使用。类和接口的所有组合都是可能的：可以将接口嵌套在类中，类嵌套在接口中，接口嵌套在接口中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OuterInterface</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">InnerInterface</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">InnerInterface</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套类的<strong>要点</strong>：</p><ol><li>使用关键字<code>class</code>声明嵌套类：在外部类中，使用 <code>class</code> 关键字来声明一个嵌套类。嵌套类可以像普通类一样拥有属性、方法等。</li><li>创建嵌套类的实例：要创建嵌套类的实例，不需要外部类的实例。可以直接通过嵌套类的类名来创建实例。</li><li>访问外部类的成员：与内部类不同，嵌套类不能直接访问外部类的成员。如果需要访问外部类的成员，可以通过外部类的实例进行访问。</li></ol><h4 id="（1）特点-1"><a href="#（1）特点-1" class="headerlink" title="（1）特点"></a>（1）特点</h4><ul><li>嵌套类<u>不能访问外部类的其他成员，</u>只能访问<u>其他嵌套类</u>（参考java静态内部类，静态成员不能访问非静态成员）；</li><li>跟内部类一样，外部类不能直接调用嵌套类成员，如需调用，需创建嵌套类对象，通过对象调用嵌套类成员。</li></ul><h4 id="（2）定义嵌套类"><a href="#（2）定义嵌套类" class="headerlink" title="（2）定义嵌套类"></a>（2）定义嵌套类</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    OuterClass().outerTest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> outerParam = <span class="string">&quot;外部类属性&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">outerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//        nestedTest()//不可以直接调用嵌套类成员</span></span><br><span class="line">        NestedClass().nestedTest()<span class="comment">//可以通过创建嵌套类对象调用嵌套类成员</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个嵌套类（相当于java静态内部类）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NestedClass</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">nestedTest</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//            println(outerParam)//此处是获取不到外部类的属性的</span></span><br><span class="line"><span class="comment">//            outerTest()//此处是调用不了外部类的方法的</span></span><br><span class="line">            <span class="keyword">val</span> nestClass2 = NestClass2()<span class="comment">//可以访问其他嵌套类</span></span><br><span class="line">            println(<span class="string">&quot;嵌套类方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其他嵌套类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NestClass2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部嵌套类"><a href="#局部嵌套类" class="headerlink" title="局部嵌套类"></a>局部嵌套类</h3><p>（用得少）</p><p> 把一个嵌套类放在方法或函数中定义，则这个嵌套类就是局部嵌套类。</p><h4 id="（1）特点-2"><a href="#（1）特点-2" class="headerlink" title="（1）特点"></a>（1）特点</h4><ul><li>作用域：只在方法内有效；</li><li>不能使用访问权限修饰符（方法内变量均不允许）；</li><li><strong>很鸡肋</strong>。</li></ul><h4 id="（2）定义局部嵌套类"><a href="#（2）定义局部嵌套类" class="headerlink" title="（2）定义局部嵌套类"></a>（2）定义局部嵌套类</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    OuterClass().localInnerTest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">localInnerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 方法内定义一个局部嵌套类，可以被继承</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 定义一个局部嵌套类的方法，可以被重写</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">localInnerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">                println(<span class="string">&quot;LocalInnerClass&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 方法内定义另一个局部嵌套类，继承于其他嵌套类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">SubLocalInnerClass</span> : <span class="type">LocalInnerClass</span>() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">localInnerTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">                println(<span class="string">&quot;SubLocalInnerClass&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只能在该方法内使用定义的局部嵌套类</span></span><br><span class="line">        <span class="keyword">val</span> localInnerClass = LocalInnerClass()</span><br><span class="line">        localInnerClass.localInnerTest()</span><br><span class="line">        <span class="keyword">val</span> subLocalInnerClass = SubLocalInnerClass()</span><br><span class="line">        subLocalInnerClass.localInnerTest()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在外部类的外部使用内部类和嵌套类"><a href="#在外部类的外部使用内部类和嵌套类" class="headerlink" title="在外部类的外部使用内部类和嵌套类"></a>在外部类的外部使用内部类和嵌套类</h3><h4 id="（1）在外部类外部使用内部类"><a href="#（1）在外部类外部使用内部类" class="headerlink" title="（1）在外部类外部使用内部类"></a>（1）在外部类外部使用内部类</h4><p>（代码接上）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">//在外部类的外部使用内部类</span></span><br><span class="line">    <span class="keyword">val</span> innerClass : OuterClass.InnerClass = OuterClass().InnerClass()</span><br><span class="line">    innerClass.innerTest()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）在外部类外部使用嵌套类"><a href="#（2）在外部类外部使用嵌套类" class="headerlink" title="（2）在外部类外部使用嵌套类"></a>（2）在外部类外部使用嵌套类</h4><p>（代码接上）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">//在外部类的外部使用外部类的嵌套类</span></span><br><span class="line">    <span class="keyword">val</span> nestedClass: OuterClass.NestedClass = OuterClass.NestedClass()</span><br><span class="line">    nestedClass.nestedTest()</span><br><span class="line">    <span class="keyword">val</span> nestClass2 : OuterClass.NestClass2 = OuterClass.NestClass2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套类和内部类的区别"><a href="#嵌套类和内部类的区别" class="headerlink" title="嵌套类和内部类的区别"></a>嵌套类和内部类的区别</h3><p>嵌套类和内部类的区别与Java中的概念类似，但有一些细微的差异：</p><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><ul><li>嵌套类（Nested Class）：使用关键字 <code>class</code> 声明在另一个类内部的类。嵌套类默认是静态的。</li><li>内部类（Inner Class）：使用关键字 <code>inner class</code> 声明在另一个类内部的类。内部类与外部类实例相关联。</li></ul><h4 id="访问外部类成员"><a href="#访问外部类成员" class="headerlink" title="访问外部类成员"></a>访问外部类成员</h4><ul><li>嵌套类：嵌套类可以访问外部类的所有成员，包括私有成员，无需通过外部类实例。</li><li>内部类：内部类可以直接访问外部类的所有成员，包括私有成员，但需要通过外部类实例引用进行访问。</li></ul><h4 id="实例化方式"><a href="#实例化方式" class="headerlink" title="实例化方式"></a>实例化方式</h4><ul><li>嵌套类：要创建嵌套类的实例，不需要外部类的实例，可以直接通过嵌套类的类名来创建实例。</li><li>内部类：要创建内部类的实例，必须先创建外部类的实例，然后再使用外部类实例来创建内部类的实例。</li></ul><p>总体上，嵌套类在语义上独立于外部类，而内部类与外部类实例紧密关联。</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="try"><a href="#try" class="headerlink" title="try"></a>try</h4><p>使用 <code>try</code> 关键字将可能会抛出异常的代码块包裹起来。如果在 <code>try</code> 块中发生了异常，程序会跳转到适当的 <code>catch</code> 块或 <code>finally</code> 块进行处理。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会抛出异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (exception: Exception) &#123;</span><br><span class="line">    <span class="comment">// 捕获并处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 可选的 finally 块，无论是否发生异常都会执行的清理代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h4><p><code>catch</code> 关键字用于捕获并处理指定类型的异常。可以为不同类型的异常提供多个 <code>catch</code> 块，并在每个块中编写相应的处理逻辑。</p><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><p><code>finally</code> 关键字用于指定一个可选的代码块，在 <code>try</code> 块中的代码执行完毕后（包括发生异常的情况下），在异常被抛出之前执行。<code>finally</code> 块通常用于资源清理、关闭文件或释放锁等操作。</p><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p><code>throw</code> 关键字用于显式地抛出一个异常。可以抛出Kotlin内置的异常类型或自定义的异常类型。通常在某个条件下，我们希望手动抛出一个异常来中断程序执行或提供错误信息。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionType(<span class="string">&quot;Error message&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="by-委托"><a href="#by-委托" class="headerlink" title="by-委托"></a>by-委托</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kotlin学习记录&quot;&gt;&lt;a href=&quot;#Kotlin学习记录&quot; class=&quot;headerlink&quot; title=&quot;Kotlin学习记录&quot;&gt;&lt;/a&gt;Kotlin学习记录&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Compose学习笔记</title>
    <link href="http://example.com/2023/10/05/Jetpack%20Compose%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/10/05/Jetpack%20Compose%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-10-05T03:18:59.786Z</published>
    <updated>2023-10-05T03:40:54.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h3 id="Compose是什么？"><a href="#Compose是什么？" class="headerlink" title="Compose是什么？"></a>Compose是什么？</h3><p> Compose 是一个声明性框架，也就是声明式或者说函数式编程。他通过函数刷新屏幕上的内容，而不需要拿到组件的具体实例，UI是关于状态的函数，一切都是函数。</p><p>抛弃了原有安卓view的体系，完全重新实现了一套新的ui体系</p><p>使用可组合函数来替换view构建UI界面，只允许一次测量，避免了布局嵌套多次测量问题，从根本上解决了布局层级对布局性能的影响。</p><h3 id="compose编程思想"><a href="#compose编程思想" class="headerlink" title="compose编程思想"></a>compose编程思想</h3><p>Compose是用Kotlin写的，Kotlin版本不低于1.5.10；kotlin支持函数式编程是Compose实现的关键。Compose 是一个声明性框架，也就是声明式或者说函数式编程。他通过函数刷新屏幕上的内容，而不需要拿到组件的具体实例，UI是关于状态的函数，一切都是函数。</p><h3 id="Composable注解"><a href="#Composable注解" class="headerlink" title="Composable注解"></a>Composable注解</h3><p>Compose函数都加了Composable注解修饰。Composable注解的函数只能被另一个Composable注解的函数调用。此注解可告诉编译器，被修饰的函数是Compose函数，用来描述UI界面的。这些函数不返回任何内容，他们旨在描述当前的UI状态。</p><h3 id="微件"><a href="#微件" class="headerlink" title="微件"></a>微件</h3><p>Text（）、Image（）、Row（）、Coulm（）等这些描述屏幕元素的函数都被称为微件，类似TextView、ImageView、LinearLayout。从代码上看 view 之间的关系是继承的关系，LinearLayout 继承ViewGroup，ViewGroup继承 View。微件之间没有任何关系，通过组合嵌套自由搭配。在继承关系中有些不必要的属性也会一并继承，这就显的多余。在这一点上，组合组合函数明显更好。</p><h3 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h3><p>在view 体系中如需更改某个组件，可以在该该件上调用 setter 以更改其内部状态。在 Compose 中，则是使用<strong>新数据再次调用可组合函数</strong>。在Compose中UI刷新的唯一方法就是重组，决定是否重组的条件就是与**@Composable元素绑定的数据是否发生了变化**。</p><h1 id="Compose-布局"><a href="#Compose-布局" class="headerlink" title="Compose 布局"></a>Compose 布局</h1><h2 id="标准布局组件"><a href="#标准布局组件" class="headerlink" title="标准布局组件"></a>标准布局组件</h2><p><img src="/..%5C%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5C%E5%B8%83%E5%B1%80%E5%9F%BA%E7%A1%80.png" alt="布局基础"></p><h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><p>使用 <code>Column</code>可将多个项垂直地放置在屏幕上。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ArtistCard</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        Text(<span class="string">&quot;Alfred Sisley&quot;</span>)</span><br><span class="line">        Text(<span class="string">&quot;3 minutes ago&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Column</code> 组件，可以使用以下参数来控制子项的位置和对齐方式：</p><p><strong>verticalArrangement</strong>（垂直排列方式）：用于指定子组件垂直方向的排列方式，常见选项有：</p><ul><li><code>Top</code>：顶部对齐</li><li><code>Center</code>：居中对齐</li><li><code>Bottom</code>：底部对齐</li><li><code>SpaceEvenly</code>：均匀分布</li><li><code>SpaceBetween</code>：两端对齐</li><li><code>SpaceAround</code>：环绕分布</li></ul><p><strong>horizontalAlignment</strong>（水平对齐方式）：用于指定子组件在垂直方向上的对齐方式，常见选项有：</p><ul><li><code>Start</code>：左对齐（默认）</li><li><code>End</code>：右对齐</li><li><code>CenterHorizontally</code>：水平居中对齐</li><li><code>Alignment</code>：自定义对齐方式，可以使用<code>Alignment.CenterHorizontally</code>等常量进行指定</li></ul><hr><h4 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h4><p>对于<code>Row</code> 组件，可以使用以下参数来控制子项的位置和对齐方式：</p><p>horizontalArrangement（水平排列方式）：用于指定子组件水平方向的排列方式，常见选项有：</p><ul><li><code>Start</code>：左对齐（默认）</li><li><code>Center</code>：居中对齐</li><li><code>End</code>：右对齐</li><li><code>SpaceEvenly</code>：均匀分布</li><li><code>SpaceBetween</code>：两端对齐</li><li><code>SpaceAround</code>：环绕分布</li></ul><p>verticalAlignment（垂直对齐方式）：用于指定子组件在水平方向上的对齐方式，常见选项有：</p><ul><li><code>Top</code>：顶部对齐</li><li><code>CenterVertically</code>：垂直居中对齐</li><li><code>Bottom</code>：底部对齐</li><li><code>Alignment</code>：自定义对齐方式，可以使用<code>Alignment.CenterVertically</code>等常量进行指定</li></ul><p>同样，使用 <code>Row</code>可将多个项水平地放置在屏幕上。<code>Column</code> 和 <code>Row</code> 都支持配置它们所含元素的对齐方式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ArtistCard</span><span class="params">(artist: <span class="type">Artist</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在水平方向上排列子组件，并垂直居中对齐</span></span><br><span class="line">    Row(verticalAlignment = Alignment.CenterVertically) &#123;</span><br><span class="line">        <span class="comment">// 显示艺术家的图片</span></span><br><span class="line">        Image(</span><br><span class="line">            <span class="comment">/*...*/</span> </span><br><span class="line">        ) </span><br><span class="line">        <span class="comment">// 垂直方向上排列子组件</span></span><br><span class="line">        Column &#123;</span><br><span class="line">            <span class="comment">// 显示艺术家的名称</span></span><br><span class="line">            Text(artist.name)            </span><br><span class="line">            <span class="comment">// 显示艺术家的最后在线查看时间</span></span><br><span class="line">            Text(artist.lastSeenOnline)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/..%5C%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5Clayout-text-with-picture.png" alt="layout-text-with-picture"></p><hr><h4 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h4><p>使用 <code>Box</code>可将元素放在其他元素上。<code>Box</code> 还支持为其包含的元素配置特定的对齐方式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ArtistAvatar</span><span class="params">(artist: <span class="type">Artist</span>)</span></span> &#123;</span><br><span class="line">    Box &#123;</span><br><span class="line">        Image(<span class="comment">/*...*/</span>)</span><br><span class="line">        Icon(<span class="comment">/*...*/</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/..%5C%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5Clayout-box-with-picture.png" alt="layout-box-with-picture"></p><p>Box 组件的常用参数和选项：</p><p>contentAlignment（内容对齐方式）：用于指定子组件在 Box 中的对齐方式，常见选项有：</p><ul><li><code>TopStart</code>：顶部左对齐</li><li><code>TopCenter</code>：顶部居中对齐</li><li><code>TopEnd</code>：顶部右对齐</li><li><code>CenterStart</code>：垂直居中左对齐</li><li><code>Center</code>：垂直居中水平居中对齐</li><li><code>CenterEnd</code>：垂直居中右对齐</li><li><code>BottomStart</code>：底部左对齐</li><li><code>BottomCenter</code>：底部居中对齐</li><li><code>BottomEnd</code>：底部右对齐</li></ul><hr><p>只需要这些构建块，就可以自行编写可组合函数，将这些布局组合成更精美的布局，让其适合自己的应用。</p><p><img src="/..%5C%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5C%E4%B8%89%E4%B8%AA%E5%B8%83%E5%B1%80.png" alt="三个布局"></p><h2 id="修饰符Modifier"><a href="#修饰符Modifier" class="headerlink" title="修饰符Modifier"></a>修饰符Modifier</h2><p>修饰符（Modifiers）是一种用于修改组件行为和外观的特殊函数。通过应用修饰符，可以对组件进行布局、设置样式、添加交互等操作，以满足各种需求。</p><ul><li>更改可组合项的大小、布局、行为和外观</li><li>添加信息，如无障碍标签</li><li>处理用户输入</li><li>添加高级互动，如使元素可点击、可滚动、可拖动或可缩放</li></ul><p>可以通过调用某个 <a href="https://developer.android.google.cn/reference/kotlin/androidx/compose/ui/Modifier"><code>Modifier</code></a> 类函数来创建修饰符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.compose.ui.Modifier</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">  Column(modifier = Modifier.padding(<span class="number">24.</span>dp)) &#123;</span><br><span class="line">    Text(text = <span class="string">&quot;Hello,&quot;</span>)</span><br><span class="line">    Text(text = name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修饰符可以通过链式调用的方式组合在一起</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">    modifier = Modifier.padding(<span class="number">24.</span>dp).fillMaxWidth()</span><br><span class="line">  ) &#123;</span><br><span class="line">    Text(text = <span class="string">&quot;Hello,&quot;</span>)</span><br><span class="line">    Text(text = name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Modifier</code>对<strong>顺序</strong>是敏感的，不同的顺序有不同的效果。由于每个函数都会对上一个函数返回的 <code>Modifier</code> 进行更改，因此顺序会影响最终结果。</p><h4 id="内置修饰符"><a href="#内置修饰符" class="headerlink" title="内置修饰符"></a>内置修饰符</h4><p>Jetpack Compose 提供了一些内置的修饰符，用于快速修改组件的外观和行为。</p><p>常用的修饰符及其功能：</p><ol><li><p>大小调整：</p><ul><li><code>size()</code>：设置组件的宽度和高度。</li><li><code>width()</code> 和 <code>height()</code>：分别设置组件的宽度和高度。</li><li><code>fillMaxSize()</code>：组件占据可用空间的最大大小。</li><li><code>wrapContentSize()</code>：组件根据内容的大小自动调整大小。</li></ul></li><li><p>布局：</p><ul><li><code>padding()</code>：设置组件的内边距。</li><li><code>align()</code>：设置组件在父容器中的对齐方式。</li><li><code>offset()</code>：将组件相对于原始位置进行偏移。</li><li><code>clickable()</code>：使组件可以响应点击事件。</li><li><code>clip()</code>：裁剪组件的内容，使其适应指定的形状。</li></ul></li><li><p>样式和外观：</p><ul><li><code>background()</code>：设置组件的背景颜色或背景绘制。</li><li><code>border()</code>：添加边框到组件。</li><li><code>shadow()</code>：为组件添加阴影效果。</li><li><code>alpha()</code>：设置组件的不透明度。</li><li><code>rotate()</code>：旋转组件。</li><li><code>scale()</code>：缩放组件。</li></ul></li><li><p>列表和滚动：</p><ul><li><code>scrollable()</code>：使组件可滚动。</li><li><code>scrollableState</code>：管理滚动的状态。</li><li><code>verticalScroll()</code> 和 <code>horizontalScroll()</code>：设置组件的滚动方向。</li></ul></li></ol><h4 id="内边距和尺寸"><a href="#内边距和尺寸" class="headerlink" title="内边距和尺寸"></a>内边距和尺寸</h4><p>在Compose中，默认情况下，布局容器会将其子项包装在内部，并根据子项的大小自动计算和分配空间。这意味着<strong>子项的大小将决定容器的大小</strong>。可以使用Compose中的<code>size</code>修饰符来手动设置布局容器的尺寸。该修饰符允许你指定一个明确的宽度和高度，或者使用特定的尺寸约束条件。</p><p>通过设置尺寸修饰符，可以控制布局容器的大小而不受子项大小的影响。   </p><p>在Compose中，布局容器通常会受到其父项的约束条件的限制，这些约束条件可以是父容器的尺寸、布局参数或其他约束。当您手动指定一个尺寸时，如果该尺寸与父项的约束冲突，Compose会尝试进行<strong>自适应调整</strong>以满足约束条件。</p><p>例如，如果将一个具有固定宽度和高度的组件放置在一个具有自适应大小的布局容器中，那么布局容器可能会自动调整自身的大小以适应子项的尺寸，而不是强制保持您指定的尺寸。如果指定的大小<strong>不满足父布局的约束</strong>，则尺寸将会无效。 如果强制设置请使用而不考虑父控件约束，可以使用 <code>requiredSize</code>  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ArtistCard</span><span class="params">(<span class="comment">/*...*/</span>)</span></span> &#123;</span><br><span class="line">    Row(</span><br><span class="line">        modifier = Modifier.size(width = <span class="number">400.</span>dp, height = <span class="number">100.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Image(</span><br><span class="line">            <span class="comment">/*...*/</span></span><br><span class="line">            modifier = Modifier.requiredSize(<span class="number">150.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Column &#123; <span class="comment">/*...*/</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此示例中，即使父项的 <code>height</code> 设置为 <code>100.dp</code>，<code>Image</code> 的高度还是 <code>150.dp</code>，因为 <code>requiredSize</code> 修饰符优先级较高。</p><p>如果希望子布局填充父项允许的所有可用高度，请添加 <code>fillMaxHeight</code> 修饰符，Compose 还提供了 <code>fillMaxSize</code> 和 <code>fillMaxWidth</code>。</p><p><code>fillMaxHeight</code>：该修饰符用于将组合元素的高度设置为最大可用空间的高度。它会将元素的高度扩展到容器提供的最大高度，并填充整个可用垂直空间。</p><p><code>fillMaxSize</code>：该修饰符用于同时将组合元素的宽度和高度设置为最大可用空间的宽度和高度。它会将元素填充满整个可用空间。</p><p><code>fillMaxWidth</code>：该修饰符用于将组合元素的宽度设置为最大可用空间的宽度。它会将元素的宽度扩展到容器提供的最大宽度，并填充整个可用水平空间。</p><p><strong>注意：</strong>这些修饰符只能在具有尺寸约束的容器中使用，例如 <code>Box</code>、<code>Column</code>、<code>Row</code> 等。</p><p>如需在整个元素周围全添加内边距，请设置 <code>padding</code> 修饰符。</p><p><code>padding</code> 修饰符接受一个参数，用于指定四个方向上的内边距值。可以使用 <code>Dp</code>（密度无关像素）或 <code>dp</code>（整数）类型的值来指定内边距的大小。如果只提供一个值，则四个方向上的内边距均相等；如果提供两个值，则第一个值表示水平方向的内边距，第二个值表示垂直方向的内边距；如果提供四个值，则分别表示左、上、右、下四个方向上的内边距。</p><p>示例用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Box(</span><br><span class="line">    Modifier.padding(<span class="number">16.</span>dp) <span class="comment">// 四个方向上的内边距均为 16dp</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 组件内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Box(</span><br><span class="line">    Modifier.padding(horizontal = <span class="number">16.</span>dp, vertical = <span class="number">8.</span>dp) <span class="comment">// 水平方向上的内边距为 16dp，垂直方向上的内边距为 8dp</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 组件内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Box(</span><br><span class="line">    Modifier.padding(start = <span class="number">16.</span>dp, end = <span class="number">16.</span>dp) <span class="comment">// 左边内边距为 16dp，右边内边距为 16dp</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 组件内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Box(</span><br><span class="line">    Modifier.padding(<span class="number">8.</span>dp, <span class="number">12.</span>dp, <span class="number">16.</span>dp, <span class="number">20.</span>dp) <span class="comment">// 左侧内边距为 8dp，上侧内边距为 12dp，右侧内边距为 16dp，下侧内边距为 20dp</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 组件内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如需在<strong>文本基线上方</strong>添加内边距，以实现从布局顶部到基线保持特定距离，请使用 <code>paddingFromBaseline</code> 修饰符。</p><p><code>paddingFromBaseline</code> 修饰符是一个用于在 Compose 中设置基线偏移的修饰符。它被用于调整元素相对于基线的位置，以实现更好的文本对齐效果。它接受一个参数，用于指定基线的偏移值。可以使用 <code>Dp</code>（密度无关像素）或 <code>dp</code>（整数）类型的值来指定偏移的大小。正值表示向上偏移，负值表示向下偏移。这个偏移值通常会与文本的字体和大小相关。</p><p>示例用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    text = <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    modifier = Modifier.paddingFromBaseline(top = <span class="number">8.</span>dp)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>paddingFromBaseline</code> 修饰符通常用于与文本或其他组件的对齐和布局相关的场景。通过微调基线偏移，可以实现更好的视觉效果和排版效果。</p><h4 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h4><p>要相对于原始位置放置布局，可以添加 <code>offset</code> 修饰符，并在 <strong>x</strong> 轴和 <strong>y</strong> 轴中设置偏移量。偏移量可以是正数，也可以是非正数。<code>padding</code> 和 <code>offset</code> 之间的区别在于，向可组合项添加 <code>offset</code> 不会改变其测量结果。</p><p><code>offset</code> 修饰符根据布局方向水平应用。在<strong>从左到右</strong>的上下文中，正 <code>offset</code> 会将元素向右移，而在<strong>从右到左</strong>的上下文中，它会将元素向左移。如果您需要设置偏移量，而不考虑布局方向，请参阅 <a href="https://developer.android.google.cn/reference/kotlin/androidx/compose/foundation/layout/package-summary#absoluteOffset(androidx.compose.ui.Modifier,androidx.compose.ui.unit.Dp,androidx.compose.ui.unit.Dp)"><code>absoluteOffset</code></a> 修饰符，该修饰符中的正偏移值一律会将元素向右移。</p><h2 id="ConstraintLayout-组件"><a href="#ConstraintLayout-组件" class="headerlink" title="ConstraintLayout 组件"></a><a href="https://www.bilibili.com/video/BV1Fb4y1h72C?t=493.0">ConstraintLayout 组件</a></h2><p>使用 ConstraintLayout，可以通过添加约束关系，将组件相对于其他组件或父容器进行定位和布局。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>将该库作为依赖项添加到同一个 <code>build.gradle</code> 文件中，如以下示例所示。请注意，<a href="https://github.com/androidx/constraintlayout">最新版本</a>可能与示例中显示的不同：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout-compose:1.0.0-alpha03&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式：</p><h3 id="使用方式一："><a href="#使用方式一：" class="headerlink" title="使用方式一："></a><a href="https://www.bilibili.com/video/BV1Fb4y1h72C?t=493.0">使用方式一：</a></h3><p>在可组合项中使用修饰符以内嵌的方式设置</p><pre><code>   使用步骤：    步骤一、使用 `createRefs()`或 `createRef()`创建与组件关联的引用    步骤二、通过给`constraintAs`修饰符设置与之关联的引用    步骤三、调用`linkTo()`设置约束</code></pre><p>在使用 ConstraintLayout 时，需要使用 <code>Modifier.constrainAs()</code> 修饰符来为每个组件设置约束。通过 <code>constrainAs</code> 修饰符，可以指定组件的边距、对齐方式以及与其他组件之间的相对位置。</p><h4 id="引用创建"><a href="#引用创建" class="headerlink" title="引用创建"></a>引用创建</h4><p>在<code>View</code>系统的<code>ConstraintLayout</code>在<code>xml</code>布局中，需要通过id进行相关引用，在<code>Compose</code>也是类似的。通过<code>createRefs</code>函数或<code>createRef</code>函数为不同的<code>View</code>预定一个<strong>引用</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">learnConstraintLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConstraintLayout() &#123;</span><br><span class="line">    <span class="comment">//通过createRefs创建三个引用</span></span><br><span class="line">    <span class="keyword">val</span> (image,name,desc)=createRefs()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="绑定引用"><a href="#绑定引用" class="headerlink" title="绑定引用"></a>绑定引用</h4><p>将通过<code>constrainAs</code>函数将引用与<code>View</code>绑定，相当于给<code>View</code>赋值了一个<code>id</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">learnConstraintLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConstraintLayout() &#123;</span><br><span class="line">    <span class="comment">//通过createRefs创建三个引用</span></span><br><span class="line">    <span class="keyword">val</span> (image,name,desc)=createRefs()</span><br><span class="line">        </span><br><span class="line">        Image(  painter = painterResource(id = R.drawable.one),</span><br><span class="line">                contentDescription = <span class="string">&quot;头像&quot;</span>,</span><br><span class="line">                modifier = Modifier  </span><br><span class="line">                    .size(<span class="number">100.</span>dp)</span><br><span class="line">                    .clip(shape = RoundedCornerShape(<span class="number">5</span>))</span><br><span class="line">                .constrainAs(image) &#123;<span class="comment">//将 Image 组件与 image 引用绑定</span></span><br><span class="line">                        </span><br><span class="line">                    &#125;,</span><br><span class="line">                contentScale = ContentScale.Crop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>linkTo</code>函数将<code>view</code>与其他<code>view</code>或者<code>parent</code>约束。这里的<code>parent</code>指的就是<code>ConstraintLayout</code>本身，<code>linkTo</code>中还可以添加<code>margin</code>来设置视图外边距的大小。</p><p>每个视图至少要有两个约束（水平和垂直方向上各一个）才能确定视图的最终位置。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">learnConstraintLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConstraintLayout() &#123;</span><br><span class="line">    <span class="comment">//通过createRefs创建三个引用</span></span><br><span class="line">    <span class="keyword">val</span> (image,name,desc)=createRefs()</span><br><span class="line">        </span><br><span class="line">        Image(  painter = painterResource(id = R.drawable.one),</span><br><span class="line">                contentDescription = <span class="string">&quot;头像&quot;</span>,</span><br><span class="line">                modifier = Modifier  </span><br><span class="line">                    .size(<span class="number">100.</span>dp)</span><br><span class="line">                    .clip(shape = RoundedCornerShape(<span class="number">5</span>))</span><br><span class="line">                .constrainAs(image) &#123;<span class="comment">//通过constrainAs将Image与image绑定,并增加约束</span></span><br><span class="line">                        top.linkTo(image.bottom,margin = <span class="number">15.</span>dp)</span><br><span class="line">                        start.linkTo(parent.start)</span><br><span class="line">                        end.linkTo(parent.end)</span><br><span class="line">                    &#125;,</span><br><span class="line">                contentScale = ContentScale.Crop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>constrainAs</code>函数中的<code>start</code>、<code>top</code>、<code>end</code>、<code>bottom</code>分别代表<code>view</code>的左、上、右、下四条边，<code>linkTo</code>表示相互作用。例如代码中的<code>top.linkTo(parent.top)</code>表示<code>Image</code>的顶边和<code>ConstraintLayout</code>的顶边对齐，和<code>view</code>系统中的<code>layout_constraintTop_toTopOf=&quot;parent&quot;</code>是一致。接下来再增加两个<code>Text</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">learnConstraintLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConstraintLayout() &#123;</span><br><span class="line">    <span class="comment">//通过createRefs创建三个引用</span></span><br><span class="line">    <span class="keyword">val</span> (image,name,desc)=createRefs()</span><br><span class="line">        </span><br><span class="line">        Image(  painter = painterResource(id = R.drawable.one),</span><br><span class="line">                contentDescription = <span class="string">&quot;头像&quot;</span>,</span><br><span class="line">                modifier = Modifier  </span><br><span class="line">                    .size(<span class="number">100.</span>dp)</span><br><span class="line">                    .clip(shape = RoundedCornerShape(<span class="number">5</span>))</span><br><span class="line">                .constrainAs(image) &#123;<span class="comment">//将 Image 组件与 image 引用绑定</span></span><br><span class="line">                        top.linkTo(image.bottom,margin = <span class="number">15.</span>dp)</span><br><span class="line">                        start.linkTo(parent.start)</span><br><span class="line">                        end.linkTo(parent.end)</span><br><span class="line">                    &#125;,</span><br><span class="line">                contentScale = ContentScale.Crop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   Text(text=<span class="string">&quot;每天都要心情好好&quot;</span>,</span><br><span class="line">                modifier = Modifier.constrainAs(nameText)&#123;</span><br><span class="line">                    top.linkTo(image.bottom)</span><br><span class="line">                    start.linkTo(parent.start)</span><br><span class="line">                    end.linkTo(parent.end)</span><br><span class="line">                &#125;</span><br><span class="line">                )</span><br><span class="line">            Text(text=<span class="string">&quot;开朗热情&quot;</span>,</span><br><span class="line">                modifier = Modifier.constrainAs(cityText) &#123;</span><br><span class="line">                    top.linkTo(image.bottom,margin = <span class="number">15.</span>dp)</span><br><span class="line">                    start.linkTo(parent.start)</span><br><span class="line">                    end.linkTo(parent.end)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h3 id="使用方式二："><a href="#使用方式二：" class="headerlink" title="使用方式二："></a><a href="https://www.bilibili.com/video/BV1AQ4y1Q7Zz?t=2.5">使用方式二：</a></h3><h4 id="约束条件和布局分离方式"><a href="#约束条件和布局分离方式" class="headerlink" title="约束条件和布局分离方式"></a>约束条件和布局分离方式</h4><p> 在某些情况下我们需要将约束条件和应用的布局分离开，便于使用。如：根据屏幕配置（横屏竖屏）来更改约束条件，或在两个约束条件集之间添加动画效果等。</p><p>对于此类应用场景可采用<code>ConstraintSet+Modifier.layoutId</code>组合的方式实现。具体步骤如下：</p><ul><li>生成一个<code>ConstraintSet</code>对象，并将其作为参数传递给 <code>ConstraintLayout</code>；</li><li>使用<code>layoutId</code>修饰符将在<code>ConstraintSet</code>中创建的引用分配给可组合项。</li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式二、通过使用ConstraintSet设置约束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">StudyConstraintSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> constraintSet = decoupledConstraints(<span class="number">0.</span>dp)</span><br><span class="line"></span><br><span class="line">    ConstraintLayout(constraintSet) &#123;</span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123; <span class="comment">/* Do something */</span> &#125;,</span><br><span class="line">            <span class="comment">//设置Id实现控制约束</span></span><br><span class="line">            modifier = Modifier.layoutId(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(<span class="string">&quot;Button&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Text(<span class="string">&quot;Text&quot;</span>, Modifier.layoutId(<span class="string">&quot;text&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个ConstraintSet实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">decoupledConstraints</span><span class="params">(margin:<span class="type">Dp</span>)</span></span>:ConstraintSet&#123;</span><br><span class="line">    <span class="keyword">return</span> ConstraintSet &#123;</span><br><span class="line">        <span class="keyword">val</span> button = createRefFor(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> text = createRefFor(<span class="string">&quot;text&quot;</span>)</span><br><span class="line"></span><br><span class="line">        constrain(button)&#123;</span><br><span class="line">            top.linkTo(parent.top)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        constrain(text)&#123;</span><br><span class="line">            top.linkTo(button.bottom,<span class="number">10.</span>dp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预览</span></span><br><span class="line"><span class="meta">@Preview(name = <span class="string">&quot;方式二 ConstraintSet&quot;</span>)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PreviewStudyConstraintLayout2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StudyConstraintSet()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约束尺寸"><a href="#约束尺寸" class="headerlink" title="约束尺寸"></a>约束尺寸</h3><p>当<code>Text</code>文本过长时不仅会超出<code>ConstraintLayout</code>，还有可能超出屏幕。</p><p>给<code>Text</code>的宽度增加了<code>width = Dimension.fillToConstraints</code>约束，让<code>Text</code>文本过长时，不超出约束条件。</p><p>Dimension的常用取值：</p><ol><li><code>Dimension.wrapContent</code>：将组件的尺寸设置为足以包含其内容的最小尺寸。组件的宽度或高度将根据内容进行自动调整。</li><li><code>Dimension.fillContent</code>：将组件的尺寸设置为填满其父容器的可用空间。组件将展开并填充到父容器的宽度或高度范围内。</li><li><code>Dimension.value(value: Dp)</code>：将组件的尺寸设置为指定的数值，使用密度无关像素（dp 或 dip）作为单位。例如，<code>Dimension.value(100.dp)</code> 表示将组件的尺寸设置为 100dp。</li><li><code>Dimension.preferredWrapContent</code>：类似于 <code>wrapContent</code>，但是对于某些组件，如 <code>TextView</code>，它会根据内容进行自适应调整，并考虑设置的最大宽度或高度限制。</li><li><code>Dimension.preferredValue(value: Dp)</code>：类似于 <code>value</code>，但会尽量根据内容进行自适应调整，并考虑设置的最大宽度或高度限制。</li></ol><p><img src="/..%5C%E7%AC%94%E8%AE%B0%5C%E5%9B%BE%E7%89%87%5CConstraintLayout%E4%B8%AD%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%A7%E5%B0%8F.png" alt="ConstraintLayout中如何改变视图的大小"></p><h2 id="图片与图形"><a href="#图片与图形" class="headerlink" title="图片与图形"></a>图片与图形</h2><h4 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h4><p><code>Card</code> 是一个容器组件，用于包裹其他组件并为其提供卡片样式的效果。</p><p>使用Card()创建卡片布局，在Card()中没有添加其他控件时，必须为其指定宽度和高度，不指定Card就不显示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kotlinCopy CodeCard(</span><br><span class="line">    shape = RoundedCornerShape(<span class="number">8.</span>dp),</span><br><span class="line">    elevation = <span class="number">4.</span>dp,</span><br><span class="line">    modifier = Modifier.padding(<span class="number">16.</span>dp)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 在这里添加 Card 内容，例如文本、图片、按钮等</span></span><br><span class="line">    Text(text = <span class="string">&quot;这是一个卡片&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中：</p><ul><li><p><code>shape</code> 参数指定卡片圆角的弧度,数值越大,圆角的弧度也越大。使用 <code>RoundedCornerShape</code> 可以指定圆角形状，</p></li><li><p><code>elevation</code> 参数指定了卡片的海拔高度，控制卡片的立体感。</p></li><li><p><code>modifier</code> 参数可以用于添加任何额外的修饰符，例如设置内边距或外边距。</p></li><li><p><code>border</code>参数在卡片顶部绘制边框。</p></li><li><p><code>clip</code>修饰符用于裁剪修饰符之后的组件。<code>使用border</code>时如果要加上颜色，如果要设置角度要将卡片的多余部分裁去。</p><p>例如：<code>Modifier.clip(shape = RoundedCornerShape(8.dp)).border(width = 2.dp, color =Color.Blue,shape = RoundedCornerShape(60.dp))</code></p></li></ul><h1 id="状态和组合"><a href="#状态和组合" class="headerlink" title="状态和组合"></a><a href="https://www.bilibili.com/video/BV1t5411m7rh/?spm_id_from=333.337.search-card.all.click&vd_source=9ff155c46894b61d0417c65cb4377a41">状态和组合</a></h1><p>由于 Compose 是声明式工具集，因此更新它的唯一方法是通过新参数调用同一可组合项。这些参数是界面状态的表现形式。每当状态更新时，都会发生重组。因此，<code>TextField</code> 不会像在基于 XML 的命令式视图中那样自动更新。<strong>可组合项必须明确获知新状态</strong>，才能相应地进行更新。</p><h2 id="状态更新与保存"><a href="#状态更新与保存" class="headerlink" title="状态更新与保存"></a>状态更新与保存</h2><p><code>MutableState</code> 用于管理可变状态。它主要用于在可组合函数中存储和更新应用程序的状态，以便在<strong>状态发生改变</strong>时重新绘制用户界面。</p><p><code>MutableState</code> 可以通过 <code>mutableStateOf</code> 函数来创建，该函数接受一个初始值作为参数，并返回一个包装了该初始值的 <code>MutableState</code> 对象。</p><p>例如，我们可以创建一个可变的整数状态：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countState: MutableState&lt;<span class="built_in">Int</span>&gt; = mutableStateOf(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然后，我们可以通过读取和修改 <code>value</code> 属性来访问和更新状态的值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> count: <span class="built_in">Int</span> = countState.value <span class="comment">// 读取状态的值</span></span><br><span class="line">countState.value = <span class="number">1</span> <span class="comment">// 更新状态的值</span></span><br></pre></td></tr></table></figure><p>在可组合函数中，我们可以使用 <code>remember</code> 函数配合 <code>MutableState</code> 来创建一个记忆状态。这意味着每当组合函数被调用时，都会返回相同的状态对象，而不是重新创建一个新的状态对象。这对于存储和管理组合函数的临时状态非常有用。</p><p><code>remember</code>函数用于在可组合函数中创建和记忆一个值。它类似于普通的变量声明，但具有更长的生命周期，并且会在<strong>组合函数重新调用时保持其值不变</strong>，使用<code>MutableState</code>刷新状态时如果不用<code>remember</code>保存，会一直初始化状态。</p><p>在可组合项中声明 <code>MutableState</code> 对象的方法有三种：</p><ul><li><code>val mutableState = remember &#123; mutableStateOf(default) &#125;</code></li><li><code>var value by remember &#123; mutableStateOf(default) &#125;</code></li><li><code>val (value, setValue) = remember &#123; mutableStateOf(default) &#125;</code></li></ul><p><code>by</code> 委托语法需要以下导入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.compose.runtime.getValue</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.setValue</span><br></pre></td></tr></table></figure><p>以下是一个示例，展示了如何在可组合函数中使用 <code>MutableState</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Counter</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> countState = remember &#123; mutableStateOf(<span class="number">0</span>) &#125; <span class="comment">// 创建记忆的可变状态</span></span><br><span class="line">    Button(</span><br><span class="line">        onClick = &#123; countState.value++ &#125;, <span class="comment">// 点击按钮时更新状态的值</span></span><br><span class="line">        modifier = Modifier.padding(<span class="number">8.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Count: <span class="subst">$&#123;countState.value&#125;</span>&quot;</span>) <span class="comment">// 显示状态的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个记忆的可变状态 <code>countState</code> ，并将其初始值设置为0。每当按钮被点击时，状态的值增加1，并重新绘制用户界面以反映新的值。</p><p>虽然 <code>remember</code> 可以在重组后保持状态，但不会在配置更改后保持状态。为此，要想存储的值可在Activity和进程重建后保留下来，必须使用 <code>rememberSaveable</code>。</p><p><code>rememberSaveable</code> 被设计为用于跟踪应用程序中需要持久保存的状态，例如用户输入、滚动位置等。使用方法和<code>remember</code>类似。</p><p>使用 <code>rememberSaveable</code>要遵循以下原则：</p><ul><li>在可组合函数内部使用 <code>rememberSaveable</code> 来创建和记忆状态。</li><li>只在可组合函数内部修改记忆的状态值，或者通过传递函数回调等方式从可组合函数内部改变状态。</li></ul><h2 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a><a href="https://www.bilibili.com/video/BV16d4y117Lf?t=162.5">状态提升</a></h2><p>（难死了）</p><p>状态提升是一种将私有状态移出可组合项的模式，使可组合项更趋于无状态从而提高在应用中的可重用性。</p><p>无状态可组合项是指不保存任何私有状态的可组合项。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h1&gt;&lt;h3 id=&quot;Compose是什么？&quot;&gt;&lt;a href=&quot;#Compose是什么？&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git 的奇技淫巧</title>
    <link href="http://example.com/2023/10/05/Git%20%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <id>http://example.com/2023/10/05/Git%20%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</id>
    <published>2023-10-05T03:18:59.782Z</published>
    <updated>2023-10-05T03:41:02.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-的奇技淫巧"><a href="#Git-的奇技淫巧" class="headerlink" title="Git 的奇技淫巧:"></a>Git 的奇技淫巧:</h1><blockquote><p>Git 常用命令集合，Fork 自 <a href="https://github.com/git-tips/tips">tips</a> 项目</p></blockquote><p>Git 是一个分布式版本管理工具，版本管理工具就是大家在写东西的时候都用过 <strong>回撤</strong>这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用回撤是找不回来的。而<strong>版本管理工具能记录每次的修改</strong>，只要提交到版本仓库，就可以找到之前任何时刻的状态（文本状态）。</p><p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过页面内查找的方式 <code>Ctrl/Command+f</code> 进行快速查找。</p><h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <a href="https://rogerdudler.github.io/git-guide/index.zh.html">Git 小白教程</a>入门</em></p><ol><li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li><li>所有的命令都在 <code>git version 2.7.4 (Apple Git-66)</code> 下测试通过</li><li>统一概念：<ul><li>工作区：改动（增删文件和内容）</li><li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li><li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了本地仓库，每个 commit，我叫它为一个版本。</li><li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了远程仓库（GitHub 等)</li><li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li></ul></li><li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a>😊</li></ol><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#git-%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7">Git 的奇技淫巧:</a><ul><li><a href="#%E5%BC%80%E5%8D%B7%E5%BF%85%E8%AF%BB">开卷必读</a></li><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li><li><a href="#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AA-commit">重设第一个 commit</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8">查看冲突文件列表</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">快速切换到上一个分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0-master-%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到 master 的分支</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%86%B5">展示本地分支关联远程仓库的情况</a></li><li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出所有远程分支</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">查看远程分支和本地分支的对应关系</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E5%88%A0%E9%99%A4%E4%BA%86%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E4%B9%9F%E6%83%B3%E5%88%A0%E9%99%A4">远程删除了分支本地也想删除</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">创建并切换到本地分支</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程分支中创建并切换到本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">重命名本地分支</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">查看标签详细信息</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li><li><a href="#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li><li><a href="#%E5%88%87%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA%E6%A0%87%E7%AD%BE">切回到某个标签</a></li><li><a href="#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li><li><a href="#%E6%81%A2%E5%A4%8D%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6">恢复删除的文件</a></li><li><a href="#%E4%BB%A5%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E4%BF%AE%E6%94%B9">以新增一个 commit 的方式还原某一个 commit 的修改</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-commit-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84-commit">回到某个 commit 的状态，并删除后面的 commit</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个 commit 的描述</a></li><li><a href="#%E6%9F%A5%E7%9C%8B-commit-%E5%8E%86%E5%8F%B2">查看 commit 历史</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0%E8%BF%87-head-%E7%9A%84-git-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95">显示本地更新过 HEAD 的 git 命令记录</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84-url">修改远程仓库的 url</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li><li><a href="#%E6%8A%8A-a-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA-commit%E6%94%BE%E5%88%B0-b-%E5%88%86%E6%94%AF%E4%B8%8A">把 A 分支的某一个 commit，放到 B 分支上</a></li><li><a href="#%E7%BB%99-git-%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给 git 命令起别名</a></li><li><a href="#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4-commit">存储当前的修改，但不用提交 commit</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%AC-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括 untracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-stashes">展示所有 stashes</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81">回到某个 stash 的状态</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AA-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84-stash">删除所有的 stash</a></li><li><a href="#%E4%BB%8E-stash-%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从 stash 中拿出某个文件的修改</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-tracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 tracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 untracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">强制删除 untracked 的文件</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除 untracked 的目录</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84-commit-%E5%8E%86%E5%8F%B2">展示简化的 commit 历史</a></li><li><a href="#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支导出成一个文件</a></li><li><a href="#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li><li><a href="#%E6%89%A7%E8%A1%8C-rebase-%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8-stash">执行 rebase 之前自动 stash</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AE-id%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li><li><a href="#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li><li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 gitignore 文件中记录的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-alias-%E5%92%8C-configs">展示所有 alias 和 configs</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li><li><a href="#commit-%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BA-branch1-%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AF-branch2-%E6%B2%A1%E6%9C%89-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li><li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%98%BE%E7%A4%BA-gpg-%E7%AD%BE%E5%90%8D">在 commit log 中显示 GPG 签名</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li><li><a href="#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li><li><a href="#clone-%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone 下来指定的单一分支</a></li><li><a href="#clone-%E6%9C%80%E6%96%B0%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4">clone 最新一次提交</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8">忽略某个文件的改动</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li><li><a href="#%E4%BB%A5%E6%9C%80%E5%90%8E%E6%8F%90%E4%BA%A4%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-git-%E5%88%86%E6%94%AF">以最后提交的顺序列出所有 Git 分支</a></li><li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在 commit log 中查找相关内容</a></li><li><a href="#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9A-file-%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定 file 放到工作区中</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li><li><a href="#git-%E9%85%8D%E7%BD%AE-http-%E5%92%8C-socks-%E4%BB%A3%E7%90%86">git 配置 http 和 socks 代理</a></li><li><a href="#git-%E9%85%8D%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86">git 配置 ssh 代理</a></li><li><a href="#%E8%84%91%E5%9B%BE">脑图</a></li><li><a href="#%E4%BC%98%E9%9B%85%E7%9A%84commit%E4%BF%A1%E6%81%AF">优雅的Commit信息</a></li><li><a href="#commit%E5%B7%A5%E5%85%B7">commit工具</a></li><li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li></ul></li></ul><h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> -g</span><br></pre></td></tr></table></figure><p>The command output as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">The common Git guides are:</span><br><span class="line">   attributes          Defining attributes per path</span><br><span class="line">   cli                 Git command-line interface and conventions</span><br><span class="line">   core-tutorial       A Git core tutorial for developers</span><br><span class="line">   cvs-migration       Git for CVS users</span><br><span class="line">   diffcore            Tweaking diff output</span><br><span class="line">   everyday            A useful minimum set of commands for Everyday Git</span><br><span class="line">   glossary            A Git Glossary</span><br><span class="line">   hooks               Hooks used by Git</span><br><span class="line">   ignore              Specifies intentionally untracked files to ignore</span><br><span class="line">   modules             Defining submodule properties</span><br><span class="line">   namespaces          Git namespaces</span><br><span class="line">   repository-layout    Git Repository Layout</span><br><span class="line">   revisions           Specifying revisions and ranges for Git</span><br><span class="line">   tutorial            A tutorial introduction to Git</span><br><span class="line">   tutorial-2          A tutorial introduction to Git: part two</span><br><span class="line">   workflows           An overview of recommended workflows with Git</span><br><span class="line"></span><br><span class="line">&#x27;git help -a&#x27; and &#x27;git help -g&#x27; list available subcommands and some concept guides. See &#x27;git help &lt;command&gt;&#x27; or &#x27;git help &lt;concept&gt;&#x27; to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure><h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br></pre></td></tr></table></figure><h2 id="查看冲突文件列表"><a href="#查看冲突文件列表" class="headerlink" title="查看冲突文件列表"></a>查看冲突文件列表</h2><p>展示工作区的冲突文件列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br></pre></td></tr></table></figure><h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">&#x27;^\*\|  master&#x27;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure><h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure><p>或者在 push 时加上 <code>-u</code> 参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin/mybranch -u</span><br></pre></td></tr></table></figure><h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="查看远程分支和本地分支的对应关系"><a href="#查看远程分支和本地分支的对应关系" class="headerlink" title="查看远程分支和本地分支的对应关系"></a>查看远程分支和本地分支的对应关系</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="远程删除了分支本地也想删除"><a href="#远程删除了分支本地也想删除" class="headerlink" title="远程删除了分支本地也想删除"></a>远程删除了分支本地也想删除</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;local-branchname&gt;</span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure><h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>展示当前分支的最近的 tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure><h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -<span class="built_in">ln</span></span><br></pre></td></tr></table></figure><h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure><p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;version-number&gt; -m <span class="string">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;local-version-number&gt;</span><br></pre></td></tr></table></figure><p>一次性推送所有标签，同步到远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure><h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure><p>放弃所有修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure><h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="comment">#得到 deleting_commit</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="comment">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure><h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit-id&gt;  <span class="comment">#默认就是-mixed参数。</span></span><br><span class="line"></span><br><span class="line">git reset --mixed HEAD^  <span class="comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD~3  <span class="comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit-id&gt;  <span class="comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure><h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure><h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure><h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git whatchanged --since=<span class="string">&#x27;2 weeks ago&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;handle&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">比如：git status 改成 git st，这样可以简化命令</span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000">廖雪峰老师的 git 教程</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash -u</span><br></pre></td></tr></table></figure><h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure><h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -t</span><br></pre></td></tr></table></figure><h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure><h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure><h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p><ol><li>clean 后，删除的文件无法找回</li><li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure><h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean &lt;directory-name&gt; -<span class="built_in">df</span></span><br></pre></td></tr></table></figure><h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure><h2 id="把某一个分支导出成一个文件"><a href="#把某一个分支导出成一个文件" class="headerlink" title="把某一个分支导出成一个文件"></a>把某一个分支导出成一个文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --autostash</span><br></pre></td></tr></table></figure><h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin pull/&lt;<span class="built_in">id</span>&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --word-diff</span><br></pre></td></tr></table></figure><h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -X -f</span><br></pre></td></tr></table></figure><h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --list (当前目录)</span><br><span class="line">git config --global --list (全局)</span><br></pre></td></tr></table></figure><h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure><h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure><h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --show-signature</span><br></pre></td></tr></table></figure><h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure><h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="clone-最新一次提交"><a href="#clone-最新一次提交" class="headerlink" title="clone 最新一次提交"></a>clone 最新一次提交</h2><p>只会 clone 最近一次提交，将减少 clone 时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure><p>恢复 track 指定文件的改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure><h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.fileMode <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git for-each-ref --<span class="built_in">sort</span>=-committerdate --format=<span class="string">&#x27;%(refname:short)&#x27;</span> refs/heads/</span><br></pre></td></tr></table></figure><h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --grep=<span class="string">&#x27;&lt;given-text&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="git-配置-http-和-socks-代理"><a href="#git-配置-http-和-socks-代理" class="headerlink" title="git 配置 http 和 socks 代理"></a>git 配置 http 和 socks 代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span>   <span class="comment"># 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span></span><br><span class="line">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span></span><br><span class="line">git config --global socks.proxy <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><h2 id="git-配置-ssh-代理"><a href="#git-配置-ssh-代理" class="headerlink" title="git 配置 ssh 代理"></a>git 配置 ssh 代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/config</span><br><span class="line">Host gitlab.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    <span class="comment"># 直接使用 shadowsocks 提供的 socks5 代理端口</span></span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    </span><br></pre></td></tr></table></figure><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="/./assets/git.png"></p><h2 id="优雅的Commit信息"><a href="#优雅的Commit信息" class="headerlink" title="优雅的Commit信息"></a>优雅的Commit信息</h2><p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular团队提交规范</a></p><p>主要有以下组成</p><ul><li>标题行: 必填, 描述主要修改类型和内容</li><li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释: 放 Breaking Changes 或 Closed Issues</li></ul><p>常用的修改项</p><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述</li><li>body: commit 具体修改内容, 可以分为多行</li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul><h2 id="commit工具"><a href="#commit工具" class="headerlink" title="commit工具"></a>commit工具</h2><p>可以使用<a href="https://github.com/commitizen/cz-cli">cz-cli</a>工具代替 <code>git commit</code></p><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure><p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p><p><img src="/./assets/gitcz.png"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh"><img alt="知识共享许可协议" style="border-width: 0" src="https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png"></a><br>本作品采用 <a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh">署名-非商业性使用-禁止演绎 4.0 国际</a> 进行许可。</p><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-的奇技淫巧&quot;&gt;&lt;a href=&quot;#Git-的奇技淫巧&quot; class=&quot;headerlink&quot; title=&quot;Git 的奇技淫巧:&quot;&gt;&lt;/a&gt;Git 的奇技淫巧:&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Git 常用命令集合，Fork 自 &lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Arduino学习</title>
    <link href="http://example.com/2023/10/05/Arduino%20%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/10/05/Arduino%20%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-10-05T03:18:59.778Z</published>
    <updated>2023-10-05T03:37:52.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="pinMode"><a href="#pinMode" class="headerlink" title="pinMode()"></a>pinMode()</h3><p>通过pinMode()函数，你可以将Arduino的引脚配置为以下三种模式：</p><ul><li>输出(OUTPUT)模式</li><li>输入(INPUT)模式</li><li>输入上拉（INPUT_PULLUP）模式 （仅支持Arduino 1.0.1以后版本）</li></ul><p>在输入上拉（INPUT_PULLUP）模式中，Arduino将开启引脚的内部上拉电阻，实现上拉输入功能。一旦将引脚设置为输入（INPUT）模式，Arduino内部上拉电阻将被禁用。</p><p><strong>设置Arduino引脚为输出(OUTPUT)模式</strong></p><p>当引脚设置为输出（OUTPUT）模式时，引脚为低阻抗状态。这意味着Arduino可以向其它电路元器件提供电流。也就是说，Arduino引脚在输出（OUTPUT）模式下可以点亮LED或者驱动电机。（如果被驱动的电机需要超过40mA的电流，Arduino将需要三极管或其它辅助元件来驱动他们。）</p><p>获得更多关于如何设置Arduino引脚为输出(OUTPUT)的信息，请参阅：<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/output/">OUTPUT</a></p><p><strong>设置引脚为输入(INPUT)模式</strong></p><p>当引脚设置为输入（INPUT）模式时，引脚为高阻抗状态（100兆欧）。此时该引脚可用于读取传感器信号或开关信号。</p><p><strong>注意：当Arduino引脚设置为输入（INPUT）模式或者输入上拉（INPUT_PULLUP）模式，请勿将该引脚与负压或者高于5V的电压相连，否则可能会损坏Arduino控制器。</strong></p><p>获得更多关于如何设置Arduino引脚为输入(INPUT)的信息，请参阅：<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/input/">INPUT</a></p><p>设置引脚为输入上拉（INPUT_PULLUP）模式</p><p>Arduino 微控制器自带内部上拉电阻。如果你需要使用该内部上拉电阻，可以通过pinMode()将引脚设置为输入上拉（INPUT_PULLUP）模式。</p><p><strong>注意：当Arduino引脚设置为输入（INPUT）模式或者输入上拉（INPUT_PULLUP）模式，请勿将该引脚与负压或者高于5V的电压相连，否则可能会损坏Arduino控制器。</strong></p><p>获得更多关于如何设置Arduino引脚为输入上拉(INPUT_PULLUP)的信息，请参阅：<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/input_pullup/">INPUT_PULLUP</a></p><p>以下是一个示例代码片段，展示如何控制板载 LED：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(LED_BUILTIN, OUTPUT); <span class="comment">// 将引脚 设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN, HIGH);   <span class="comment">// 将板载 LED 置为高电平（亮）</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                       <span class="comment">// 延迟1秒钟</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN, LOW);    <span class="comment">// 将板载 LED 置为低电平（灭）</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);                       <span class="comment">// 延迟1秒钟</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LED_BUILTIN 是一个常量，用于在 Arduino 程序中表示板载 LED 的引脚号。在大多数 Arduino 开发板上，都有一个内置的 LED 连接到特定的引脚上。使用 LED_BUILTIN 常量可以方便地引用该引脚，无需手动指定具体的引脚号。</span></span><br><span class="line"><span class="comment">digitalWrite()是 Arduino 编程中的一个函数，用于控制数字引脚的电平状态。该函数有两个参数：引脚号和电平状态（HIGH 或 LOW）。它用于将指定的引脚设置为高电平或低电平。</span></span><br><span class="line"><span class="comment">delay()是 Arduino 编程中的一个函数，用于在程序执行过程中产生延迟。该函数只有一个参数，即延迟的毫秒数。调用 delay() 函数后，程序将停止执行指定的毫秒数，然后再继续执行后面的代码。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="digitalRead"><a href="#digitalRead" class="headerlink" title="digitalRead()"></a>digitalRead()</h3><p><strong>说明</strong></p><p>读取数字引脚的 HIGH(高电平）或 LOW（低电平）。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digitalRead(pin)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p><code>pin</code>：被读取的引脚号码</p><p><strong>返回值</strong></p><p><a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/high/">HIGH</a> 或 <a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/low/">LOW</a></p><h3 id="Serial-begin"><a href="#Serial-begin" class="headerlink" title="Serial.begin()"></a>Serial.begin()</h3><p><code>Serial.begin()</code> 是一个函数，用于初始化串口通信功能。它需要一个参数来设置串口的波特率（即数据传输速度）。例如，<code>Serial.begin(9600)</code> 将初始化串口，将波特率设置为 9600 bps（比特&#x2F;秒）。</p><p>使用 <code>Serial.begin()</code> 后，你可以通过 <code>Serial.print()</code> 或 <code>Serial.println()</code> 函数向串口发送数据，或者使用 <code>Serial.read()</code> 接收串口发送的数据。</p><p>请注意，<code>Serial.begin()</code> 必须在设置任何串口通信之前调用，通常放在 <code>setup()</code> 函数中。</p><h3 id="nalogWrite"><a href="#nalogWrite" class="headerlink" title="nalogWrite()"></a>nalogWrite()</h3><p>nalogWrite()函数是Arduino平台的一个内置函数，用于向PWM（脉宽调制）引脚输出模拟信号。</p><p>在Arduino Uno开发板上，典型的PWM引脚为3、5、6、9、10和11。可以使用analogWrite()函数来控制这些引脚的输出模拟信号。</p><p>将一个模拟数值写进Arduino引脚。这个操作可以用来控制LED的亮度, 或者控制电机的转速. Arduino每一次对引脚执行analogWrite()指令，都会给该引脚一个固定频率的PWM信号。PWM信号的频率大约为490Hz.</p><p>analogWrite()函数接受两个参数：</p><ul><li>第一个参数是引脚号，即要输出模拟信号的引脚。</li><li>第二个参数是一个介于0和255之间的整数值，表示输出信号的<strong>占空比</strong>。0表示输出低电平，255表示输出高电平，中间的值表示占空比的百分比。</li></ul><p>占空比（Duty Cycle）表示在一个周期内，信号处于高电平状态的时间与周期的比例。对于PWM来说，占空比决定了输出信号的平均功率。</p><p>占空比值的范围通常是 0 到 255（有些Arduino板支持更大范围）。其中，0 表示 0% 的占空比，即信号始终处于低电平状态；255 表示 100% 的占空比，即信号始终处于高电平状态；而其他的值则表示占空比介于 0% 和 100% 之间的某个值，比如要将LED的亮度调节成75%，可以设置占空比为191。</p><p>通过改变<code>analogWrite()</code>函数的占空比参数，您可以控制PWM引脚上输出信号的平均功率大小，从而实现对连接到该引脚的器件（如LED、电机等）的亮度、速度或位置的调节。</p><h2 id="上拉电阻"><a href="#上拉电阻" class="headerlink" title="上拉电阻"></a><a href="https://www.bilibili.com/video/BV1W34y1579U?t=287.7">上拉电阻</a></h2><p>上拉电阻是一种用于将引脚电压拉高的电阻。在 Arduino 开发中，可以通过使用内部上拉电阻或外部上拉电阻来确保引脚在未连接任何外部元件时保持稳定的高电平状态。</p><p><strong>内部上拉电阻</strong>可以通过 <code>pinMode()</code> 函数将引脚设置为输入模式，并使用 <code>INPUT_PULLUP</code> 参数来启用内部上拉电阻。例如，<code>pinMode(2, INPUT_PULLUP)</code> 会将引脚2设置为输入模式，并启用内部上拉电阻。在这种情况下，当按钮未按下时，引脚2的电压将被拉高到逻辑高电平（VCC）。</p><p>如果使用外部上拉电阻，则需要将一个<strong>电阻连接到引脚和电源（VCC）之间，并将电阻的另一端连接到电源（VCC）</strong>。这样，当没有其他元件驱动引脚时，电阻将确保引脚电压保持在逻辑高电平状态。</p><p><img src="/./%E5%9B%BE%E7%89%87/image-20230806232525879.png" alt="image-20230806232525879"></p><p><strong>原理<a href="./%E5%9B%BE%E7%89%87/%E4%BA%86%E8%A7%A3%E4%B8%8A%E6%8B%89%E5%92%8C%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB.mp4">视频</a></strong></p><p>上拉电阻的原理是利用电阻将引脚连接到电源（VCC），从而提供一个稳定的高电平信号。</p><p><img src="/./%E5%9B%BE%E7%89%87/image-20230807004513815.png" alt="image-20230807004513815"></p><p>当引脚被设置为输入模式时，并启用了上拉电阻，电流通过上拉电阻会流向引脚。由于电阻的存在，电压会在引脚和电源之间产生<strong>压降</strong>，使得电流通过上拉电阻流向引脚，由于电流非常小，所以在上拉电阻和引脚之间的电压降也非常小，可以近似认为引脚电压与电源电压接近，这导致引脚电压被拉高到接近电源（VCC）的电压水平，形成高电平信号。</p><p>当外部元件（例如按钮或开关）连接到这个引脚时，如果外部元件处于关闭状态，即<strong>未按下</strong>按钮或开关，引脚的电流流经上拉电阻，引脚保持在高电平状态。这是因为<strong>电流可以流经上拉电阻，绕过未按下的按钮或开关</strong>。</p><p>当外部元件被打开（例如<strong>按下</strong>按钮或开关）时，它提供了低电阻路径，使引脚与地（GND）相连。此时，<strong>电流可以流经外部元件，从而绕过上拉电阻</strong>，并导致引脚电压下降到接近地（GND）的电压水平，形成低电平信号。</p><p>通过使用上拉电阻，可以确保引脚在未连接任何外部元件时处于高电平状态，并在外部元件被触发时能够检测到低电平状态。这样可以保证引脚的状态稳定性，并避免由于引脚悬空或外部干扰引起的不确定性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/10/02/hello-world/"/>
    <id>http://example.com/2023/10/02/hello-world/</id>
    <published>2023-10-02T15:18:04.596Z</published>
    <updated>2023-10-02T15:18:04.596Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
